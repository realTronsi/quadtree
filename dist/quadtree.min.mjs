var t={d:(h,e)=>{for(var i in e)t.o(e,i)&&!t.o(h,i)&&Object.defineProperty(h,i,{enumerable:!0,get:e[i]})},o:(t,h)=>Object.prototype.hasOwnProperty.call(t,h)},h={};t.d(h,{l:()=>e});class e{constructor(t,h,e,i,s,n,r){this.x1=t,this.y1=h,this.x2=e,this.y2=i,this.mx=t+(e-t)/2,this.my=h+(i-h)/2,this.maxChildren=s,this.depth=n,this.parent=r,this.children=[],this.nodes=[]}getBoundQuadrant(t){if(0===this.nodes.length)return-1;if(t.y2<this.my&&t.y1>this.y1){if(t.x2<this.mx&&t.x1>this.x1)return 0;if(t.x1>this.mx&&t.x2<this.x2)return 1}if(t.y1>this.my&&t.y2<this.y2){if(t.x2<this.mx&&t.x1>this.x1)return 2;if(t.x1>this.mx&&t.x2<this.x2)return 3}return-1}push(t){const h=this.getBoundQuadrant(t.bound);if(-1!==h)return this.nodes[h].push(t);if(this.children.push(t),t._qtree_node=this,0!==this.nodes.length||0===this.depth||this.children.length<=this.maxChildren)return;this.nodes=[new e(this.x1,this.y1,this.mx,this.my,this.maxChildren,this.depth-1,this),new e(this.mx,this.y1,this.x2,this.my,this.maxChildren,this.depth-1,this),new e(this.x1,this.my,this.mx,this.y2,this.maxChildren,this.depth-1,this),new e(this.mx,this.my,this.x2,this.y2,this.maxChildren,this.depth-1,this)];const i=this.children;let s=i.length,n=s;for(;--s;){const t=i[s],h=this.getBoundQuadrant(t.bound);if(-1!==h){this.nodes[h].push(t),n--;let e=s;for(;e<n;)i[e]=i[++e];i.pop()}}}remove(t){const h=t._qtree_node.children,e=h.indexOf(t);h[e]=h[h.length-1],h.pop(),0===this.nodes.length&&this.parent.clean()}clean(){const t=this.nodes;t[0].children.length>0||t[1].children.length>0||t[2].children.length>0||t[3].children.length>0||(this.nodes=[],this.parent.clean())}removePreserve(t){const h=t._qtree_node.children;let e=h.indexOf(t);if(h[e]=h[h.length-1],h.pop(),0!==this.nodes.length)return;const i=this.nodes;if(i[0].children.length+i[1].children.length+i[2].children.length+i[3].children.length<=this.maxChildren)return;const s=i[0].children;for(e=s.length;--e;)this.children.push(s[e]);const n=i[1].children;for(e=n.length;--e;)this.children.push(n[e]);const r=i[2].children;for(e=r.length;--e;)this.children.push(r[e]);const d=i[3].children;for(e=d.length;--e;)this.children.push(d[e]);this.nodes=[]}query(t,h,e,i,s){if(function(t,h,e,i,s,n,r,d){return r<t||s>e||d<h||n>i}(this.x1,this.y1,this.x2,this.y2,t,h,e,i))return;const n=this.children,r=this.nodes;let d=n.length;for(;d--;)if(s(n[d]))return;0!==r.length&&(r[0].query(t,h,e,i,s),r[1].query(t,h,e,i,s),r[2].query(t,h,e,i,s),r[3].query(t,h,e,i,s))}clear(){this.children=[],this.nodes=[]}}var i=h.l;export{i as Quadtree};