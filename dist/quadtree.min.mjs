var t={d:(e,h)=>{for(var i in h)t.o(h,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:h[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{l:()=>h});class h{constructor(t,e,h,i,n,s,r){this.x1=t,this.y1=e,this.x2=h,this.y2=i,this.mx=t+(h-t)/2,this.my=e+(i-e)/2,this.maxChildren=n,this.depth=s,this.parent=r,this.children=[],this.nodes=[]}getBoundQuadrant(t){if(0===this.nodes.length)return-1;if(t.y2<this.my&&t.y1>this.y1){if(t.x2<this.mx&&t.x1>this.x1)return 0;if(t.x1>this.mx&&t.x2<this.x2)return 1}if(t.y1>this.my&&t.y2<this.y2){if(t.x2<this.mx&&t.x1>this.x1)return 2;if(t.x1>this.mx&&t.x2<this.x2)return 3}return-1}push(t){const e=this.getBoundQuadrant(t.bound);if(-1!==e)return this.nodes[e].push(t);if(this.children.push(t),t._qtree_node=this,0!==this.nodes.length||0===this.depth||this.children.length<=this.maxChildren)return;this.nodes=[new h(this.x1,this.y1,this.mx,this.my,this.maxChildren,this.depth-1,this),new h(this.mx,this.y1,this.x2,this.my,this.maxChildren,this.depth-1,this),new h(this.x1,this.my,this.mx,this.y2,this.maxChildren,this.depth-1,this),new h(this.mx,this.my,this.x2,this.y2,this.maxChildren,this.depth-1,this)];const i=this.children;let n=i.length,s=n;for(;--n;){const t=i[n],e=this.getBoundQuadrant(t.bound);if(-1!==e){this.nodes[e].push(t),s--;let h=n;for(;h<s;)i[h]=i[++h];i.pop()}}}remove(t){const e=t._qtree_node;if(this!==e)return e.remove(t);const h=e.children,i=h.indexOf(t);h[i]=h[h.length-1],h.pop(),void 0!==this.parent&&this.parent.clean()}clean(){const t=this.nodes;0!==t.length&&(t[0].children.length>0||t[1].children.length>0||t[2].children.length>0||t[3].children.length>0||(this.nodes=[],void 0!==this.parent&&this.parent.clean()))}removePreserve(t){const e=t._qtree_node;if(this!==e)return e.removePreserve(t);const h=e.children;let i=h.indexOf(t);h[i]=h[h.length-1],h.pop(),void 0!==this.parent&&this.parent.cleanPreserve()}cleanPreserve(){const t=this.nodes;if(0===t.length)return;if(this.getChildrenCount()>this.maxChildren)return;const e=t[0].children;let h=e.length;for(;h--;)this.children.push(e[h]);const i=t[1].children;for(h=i.length;h--;)this.children.push(i[h]);const n=t[2].children;for(h=n.length;h--;)this.children.push(n[h]);const s=t[3].children;for(h=s.length;h--;)this.children.push(s[h]);this.nodes=[],null!==this.parent&&this.parent.cleanPreserve()}getChildrenCount(){let t=this.children.length;return 0!==this.nodes.length&&(t+=this.nodes[1].getChildrenCount()+this.nodes[0].getChildrenCount()+this.nodes[2].getChildrenCount()+this.nodes[3].getChildrenCount()),t}query(t,e,h,i,n){if(function(t,e,h,i,n,s,r,d){return r<t||n>h||d<e||s>i}(this.x1,this.y1,this.x2,this.y2,t,e,h,i))return;const s=this.children,r=this.nodes;let d=s.length;for(;d--;)if(n(s[d]))return;0!==r.length&&(r[0].query(t,e,h,i,n),r[1].query(t,e,h,i,n),r[2].query(t,e,h,i,n),r[3].query(t,e,h,i,n))}clear(){this.children=[],this.nodes=[]}}var i=e.l;export{i as Quadtree};